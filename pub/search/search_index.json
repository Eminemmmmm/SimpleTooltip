{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SimpleTooltip A lightweight, flexible JavaScript tooltip library Features Separation of styles and content \u2014 Reusable Style object Minimal additional markup required \u2014 Compatible with the title attribute Optional polygon activation area \u2014 Just supply an array of coordinates Anchored to the target or following the cursor HTML support and nested tooltips Available out of the box, yet fully customizable via options and CSS Simple transition settings Examples Wiki: Button The template tag Tip size customization Transition settings Output The term button Click Me refers to any graphical control element that provides the user a simple wayto trigger an event or to interact with dialog boxes. [ Wikipedia The free encyclopedia ] HTML The term < u > < b > button </ b > < template > < button onclick = \"alert('I have a fat tip')\" > Click Me </ button > </ template > </ u > refers to any graphical control element that provides the user a simple way to trigger an event or to interact with dialog boxes. [ < u > < a href = 'https://en.wikipedia.org/wiki/Button_(computing)' target = '_blank' > Wikipedia </ a > < template > The free encyclopedia </ template > </ u > ] JavaScript const style = new ST . Style ({ position : 'bottom' , tipSize : '10px' , transition : { delay : [ 0 , 500 ], duration : [ 200 , 500 ] } }); style . generateFromChild ( ST . Selector ( 'u' )); Wiki: Tooltip The title attribute Nested tooltips User-defined CSS Output The tooltip , also known as infotip or hint , is a common graphical user interface A form of user interface that allows users to interact with electronic devices through graphical icons and audio indicator element in which, when hovering over a screen element or component, a text box displays information about that element (such as a description of a button\u2019s function, or what an abbreviation stands for). [ Wikipedia ] HTML The < b > tooltip </ b > , also known as < b > infotip </ b > or < b > hint </ b > , is a common < u > graphical user interface < template > A form of < u title = \"The space where interactions between humans and machines occur\" > user interface </ u > that allows users to interact with electronic devices through graphical icons and audio indicator </ template > </ u > element in which, when hovering over a screen element or component, a text box displays information about that element (such as a description of a button's function, or what an abbreviation stands for). [ < u title = 'The free encyclopedia' > < a href = 'https://en.wikipedia.org/wiki/Tooltip' target = '_blank' > Wikipedia </ a > </ u > ] CSS . ST . blue { color : #fff ; background-image : linear-gradient ( #54b4eb , #2FA4E7 , #1d9ce5 ); background-repeat : no-repeat ; } JavaScript const style = new ST . Style ({ classList : [ 'blue' ], tipColor : '#1d9ce5' , useHTML : true , position : 'top' , transition : { delay : [ 0 , 500 ], duration : [ 200 , 500 ] } }); style . generateFromChild ( ST . Selector ( 'u' )); style . generateFromTitle ( ST . Selector ( 'u' )); Moe Girls Polygon activation area Following the cursor Supply JS strings as content Mouseover their face to learn their name! Output HTML < div id = 'fsn' >< img src = 'assets/fsn.jpg' ></ div > JavaScript const style = new ST . Style ({ classList : [ 'blue' ], tipColor : '#1d9ce5' , relativeTo : 'cursor' , transition : { delay : [ 0 , 100 ] } }); const pic = document . getElementById ( 'fsn' ); const sakura = [[ 101 , 18 ], [ 133 , 24 ], [ 136 , 52 ], [ 106 , 74 ], [ 90 , 64 ], [ 81 , 38 ]]; const saber = [[ 224 , 16 ], [ 253 , 10 ], [ 275 , 30 ], [ 269 , 60 ], [ 250 , 72 ], [ 225 , 56 ], [ 213 , 32 ]]; const rin = [[ 386 , 10 ], [ 405 , 18 ], [ 406 , 47 ], [ 391 , 64 ], [ 376 , 63 ], [ 360 , 45 ], [ 365 , 18 ]]; style . generateOne ( pic , () => 'Sakura' , sakura ); style . generateOne ( pic , () => 'Artoria (Saber)' , saber ); style . generateOne ( pic , () => 'Rin' , rin ); Playground Alignment height = 100px Transition Delay in activation Delay in deactivation Duration of activation Duration of deactivation delay = [0, 500], duration = [500, 500]","title":"Home"},{"location":"#simpletooltip","text":"A lightweight, flexible JavaScript tooltip library","title":"SimpleTooltip"},{"location":"#features","text":"Separation of styles and content \u2014 Reusable Style object Minimal additional markup required \u2014 Compatible with the title attribute Optional polygon activation area \u2014 Just supply an array of coordinates Anchored to the target or following the cursor HTML support and nested tooltips Available out of the box, yet fully customizable via options and CSS Simple transition settings","title":"Features"},{"location":"#examples","text":"","title":"Examples"},{"location":"#wiki-button","text":"The template tag Tip size customization Transition settings Output The term button Click Me refers to any graphical control element that provides the user a simple wayto trigger an event or to interact with dialog boxes. [ Wikipedia The free encyclopedia ] HTML The term < u > < b > button </ b > < template > < button onclick = \"alert('I have a fat tip')\" > Click Me </ button > </ template > </ u > refers to any graphical control element that provides the user a simple way to trigger an event or to interact with dialog boxes. [ < u > < a href = 'https://en.wikipedia.org/wiki/Button_(computing)' target = '_blank' > Wikipedia </ a > < template > The free encyclopedia </ template > </ u > ] JavaScript const style = new ST . Style ({ position : 'bottom' , tipSize : '10px' , transition : { delay : [ 0 , 500 ], duration : [ 200 , 500 ] } }); style . generateFromChild ( ST . Selector ( 'u' ));","title":"Wiki: Button"},{"location":"#wiki-tooltip","text":"The title attribute Nested tooltips User-defined CSS Output The tooltip , also known as infotip or hint , is a common graphical user interface A form of user interface that allows users to interact with electronic devices through graphical icons and audio indicator element in which, when hovering over a screen element or component, a text box displays information about that element (such as a description of a button\u2019s function, or what an abbreviation stands for). [ Wikipedia ] HTML The < b > tooltip </ b > , also known as < b > infotip </ b > or < b > hint </ b > , is a common < u > graphical user interface < template > A form of < u title = \"The space where interactions between humans and machines occur\" > user interface </ u > that allows users to interact with electronic devices through graphical icons and audio indicator </ template > </ u > element in which, when hovering over a screen element or component, a text box displays information about that element (such as a description of a button's function, or what an abbreviation stands for). [ < u title = 'The free encyclopedia' > < a href = 'https://en.wikipedia.org/wiki/Tooltip' target = '_blank' > Wikipedia </ a > </ u > ] CSS . ST . blue { color : #fff ; background-image : linear-gradient ( #54b4eb , #2FA4E7 , #1d9ce5 ); background-repeat : no-repeat ; } JavaScript const style = new ST . Style ({ classList : [ 'blue' ], tipColor : '#1d9ce5' , useHTML : true , position : 'top' , transition : { delay : [ 0 , 500 ], duration : [ 200 , 500 ] } }); style . generateFromChild ( ST . Selector ( 'u' )); style . generateFromTitle ( ST . Selector ( 'u' ));","title":"Wiki: Tooltip"},{"location":"#moe-girls","text":"Polygon activation area Following the cursor Supply JS strings as content Mouseover their face to learn their name! Output HTML < div id = 'fsn' >< img src = 'assets/fsn.jpg' ></ div > JavaScript const style = new ST . Style ({ classList : [ 'blue' ], tipColor : '#1d9ce5' , relativeTo : 'cursor' , transition : { delay : [ 0 , 100 ] } }); const pic = document . getElementById ( 'fsn' ); const sakura = [[ 101 , 18 ], [ 133 , 24 ], [ 136 , 52 ], [ 106 , 74 ], [ 90 , 64 ], [ 81 , 38 ]]; const saber = [[ 224 , 16 ], [ 253 , 10 ], [ 275 , 30 ], [ 269 , 60 ], [ 250 , 72 ], [ 225 , 56 ], [ 213 , 32 ]]; const rin = [[ 386 , 10 ], [ 405 , 18 ], [ 406 , 47 ], [ 391 , 64 ], [ 376 , 63 ], [ 360 , 45 ], [ 365 , 18 ]]; style . generateOne ( pic , () => 'Sakura' , sakura ); style . generateOne ( pic , () => 'Artoria (Saber)' , saber ); style . generateOne ( pic , () => 'Rin' , rin );","title":"Moe Girls"},{"location":"#playground","text":"","title":"Playground"},{"location":"#alignment","text":"height = 100px","title":"Alignment"},{"location":"#transition","text":"Delay in activation Delay in deactivation Duration of activation Duration of deactivation delay = [0, 500], duration = [500, 500]","title":"Transition"},{"location":"getting-started/","text":"Getting Started Set Up Download the files SimpleTooltip.css and SimpleTooltip.js and load them in the HTML page where you would like to use SimpleTooltip. Load SimpleTooltip.js before the script using the library. The async option is not recommended. Assume the script using the library is MyScript.js . One possible way is to add the following to head : < link rel = 'stylesheet' href = 'SimpleTooltip.js' > < script defer src = 'SimpleTooltip.js' ></ script > < script defer src = 'MyScript.js' ></ script > All classes and functions are attached to the object ST . Create a Style Any tooltip is generated from an instance of ST.Style . const style = new ST . Style ({ position : 'top' }); See the API page for all options. Generate Tooltips Style objects have various methods for generating tooltips. Choose the one that suits your need and pass in arguments accordingly. // Target: All `a` tags with `title` attribute that is a descendent of an `article` tag // Source: The `title` attribute // Event: Hovering over the `a` tag (default) // Depth: 3 (default) style . generateFromTitle ( ST . Selector ( 'article a' )); Target Elements Parameter: select Let us call the element the tooltip is attached to the \u201ctarget element\u201d. Target elements can be given by a single node, an array of node (see NodeList ), a CSS selector (see Selector ), or a JS function that takes no input and outputs an array of nodes. Source of Content Parameter: content (exclusive to generate and generateOne ) The source of the content determines the method you would choose. The content can be supplied by the title attribute of the target element ( generateFromTitle ), any attribute of the target element ( generateFromAttribute ), the last child of the target element ( generateFromChild ), which should be a template , or a JS function mapping elements to strings (the generic generate or generateOne ). The title method is preferred if the content is plain text. The template method is preferred if the content contains HTML. The function method offers the largest flexibility. Triggering Events Parameter: event The tooltips can be triggered by hovering over the target element ( 'hover' ), focusing on an element ( 'focus' ), or hovering over a polygon area relative to the target (an array of coordinates). Depth Parameter: depth The maximum depth of tooltips to be generated. A tooltip that is not inside another tooltip has depth 1. Remove Tooltips Use the function remove or removeOne .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#set-up","text":"Download the files SimpleTooltip.css and SimpleTooltip.js and load them in the HTML page where you would like to use SimpleTooltip. Load SimpleTooltip.js before the script using the library. The async option is not recommended. Assume the script using the library is MyScript.js . One possible way is to add the following to head : < link rel = 'stylesheet' href = 'SimpleTooltip.js' > < script defer src = 'SimpleTooltip.js' ></ script > < script defer src = 'MyScript.js' ></ script > All classes and functions are attached to the object ST .","title":"Set Up"},{"location":"getting-started/#create-a-style","text":"Any tooltip is generated from an instance of ST.Style . const style = new ST . Style ({ position : 'top' }); See the API page for all options.","title":"Create a Style"},{"location":"getting-started/#generate-tooltips","text":"Style objects have various methods for generating tooltips. Choose the one that suits your need and pass in arguments accordingly. // Target: All `a` tags with `title` attribute that is a descendent of an `article` tag // Source: The `title` attribute // Event: Hovering over the `a` tag (default) // Depth: 3 (default) style . generateFromTitle ( ST . Selector ( 'article a' ));","title":"Generate Tooltips"},{"location":"getting-started/#target-elements","text":"Parameter: select Let us call the element the tooltip is attached to the \u201ctarget element\u201d. Target elements can be given by a single node, an array of node (see NodeList ), a CSS selector (see Selector ), or a JS function that takes no input and outputs an array of nodes.","title":"Target Elements"},{"location":"getting-started/#source-of-content","text":"Parameter: content (exclusive to generate and generateOne ) The source of the content determines the method you would choose. The content can be supplied by the title attribute of the target element ( generateFromTitle ), any attribute of the target element ( generateFromAttribute ), the last child of the target element ( generateFromChild ), which should be a template , or a JS function mapping elements to strings (the generic generate or generateOne ). The title method is preferred if the content is plain text. The template method is preferred if the content contains HTML. The function method offers the largest flexibility.","title":"Source of Content"},{"location":"getting-started/#triggering-events","text":"Parameter: event The tooltips can be triggered by hovering over the target element ( 'hover' ), focusing on an element ( 'focus' ), or hovering over a polygon area relative to the target (an array of coordinates).","title":"Triggering Events"},{"location":"getting-started/#depth","text":"Parameter: depth The maximum depth of tooltips to be generated. A tooltip that is not inside another tooltip has depth 1.","title":"Depth"},{"location":"getting-started/#remove-tooltips","text":"Use the function remove or removeOne .","title":"Remove Tooltips"},{"location":"references/","text":"References All classes and functions are attached to the object ST , which is omitted below. Style constructor constructor ( args ) The parameter args is an optional object default to {} . The options are as follows: Field Option Default Description classList [string] [] Additional classes of tooltips useHTML boolean false Whether HTML is parsed or not, when the content is a string tip boolean true Whether the tooltip has a tip or not relativeTo target or cursor target Anchored to the target or following the cursor position top , right , bottom , or left right The position of the tooltip relative to the target or the cursor ratio A positive number 0.3 An approximate ratio of the height of the tooltip to the width tipColor Any color recognizable by CSS white The color of the tip tipSize Any length recognizable by CSS 5px The size of the tip transition.delay [a, b] where a, b are nonnegative numbers [0, 0] The delay of the transition to appearance and disappearance, measured in ms transition.duration [a, b] where a, b are nonnegative numbers [0, 0] The duration of the transition to appearance and disappearance, not including the delay, measured in ms Customization Set the color and size of the tips via tipColor and tipSize . Instead of adding more fields to args , we made the box part of tooltips customizable via classList . Every generated tooltip has the class ST . Due to CSS specificity rules, rewrite the default by selecting .ST.myClass . The generated tooltips become the last child of the target element, so the tooltips inherit some properties from the the target element. Methods Parameters select select specifies the target elements. It is one of the following: Selector(pattern) , where pattern is a CSS selector pattern NodeList(nodes) , where nodes is an array of elements a function that takes no input and outputs an array of elements each time it is called content content specifies the content and is only required by generate and generateOne . Other methods determine the content in other ways. It is a function mapping elements to strings. event Default: 'hover' event specifies the event triggering the tooltips. It is one of the following: 'hover' : hovering over the target element 'focus' : focusing on the target element An array of 2D coordinates [[x1, y1], ..., [xn, yn]] , where xi, yi are nonnegative integers: hovering over the polygon inside the target element specified by the array; the left edge of the target element has x=0 , and the top edge of the target element has y=0 depth Default: 3 depth specifies the maximum depth of tooltips to be generated. A tooltip that is not inside another tooltip has depth 1. It is a positive integer. One exception is that depth in generateOne is the depth of the one tooltip to be generated. We need this number to assign a proper z-index . .generate style . generate ( select , content , event , depth ) The most generic generator. .generateOne style . generateOne ( node , content , event , depth ) A generic generator for a single element. Note that here depth is the depth of the one tooltip to be generated. .generateFromTitle style . generateFromTitle ( select , event , depth ) The content of the tooltip is supplied by title attribute. The title attribute is then moved to data-st-title . The selected elements without title attribute are ignored. .generateFromAttribute style . generateFromAttribute ( select , attribute , event , depth ) The content of the tooltip is supplied by the attribute named attribute . .generateFromChild style . generateFromChild ( select , event , depth ) The content of the tooltip is supplied by the last child of the target element, which should be a template . The template is kept. The selected elements without children or whose last element child is not a template are ignored. Helpers NodeList NodeList ( nodes ) See select . Selector Selector ( pattern ) See select . Removal remove remove ( select ) The last tooltip of the selected elements are removed. If title was moved to data-st-title , it is restored. The selected elements without children or whose last element child is not a tooltip are ignored. removeOne removeOne ( node ) The last tooltip of node is removed. If title was moved to data-st-title , it is restored. If the node has no children or the last element child is not a tooltip, do nothing. Caveats The algorithm we used for checking if the cursor is inside the polygon has time complexity O(n), where n is the number of vertices of the polygon. If relativeTo is set to cursor , set a transition delay to make the tooltip move smoother. The tooltip is made a child of the target element; to position the tooltip, the CSS position property of the target element is set to relative if it was static .","title":"References"},{"location":"references/#references","text":"All classes and functions are attached to the object ST , which is omitted below.","title":"References"},{"location":"references/#style","text":"","title":"Style"},{"location":"references/#constructor","text":"constructor ( args ) The parameter args is an optional object default to {} . The options are as follows: Field Option Default Description classList [string] [] Additional classes of tooltips useHTML boolean false Whether HTML is parsed or not, when the content is a string tip boolean true Whether the tooltip has a tip or not relativeTo target or cursor target Anchored to the target or following the cursor position top , right , bottom , or left right The position of the tooltip relative to the target or the cursor ratio A positive number 0.3 An approximate ratio of the height of the tooltip to the width tipColor Any color recognizable by CSS white The color of the tip tipSize Any length recognizable by CSS 5px The size of the tip transition.delay [a, b] where a, b are nonnegative numbers [0, 0] The delay of the transition to appearance and disappearance, measured in ms transition.duration [a, b] where a, b are nonnegative numbers [0, 0] The duration of the transition to appearance and disappearance, not including the delay, measured in ms","title":"constructor"},{"location":"references/#customization","text":"Set the color and size of the tips via tipColor and tipSize . Instead of adding more fields to args , we made the box part of tooltips customizable via classList . Every generated tooltip has the class ST . Due to CSS specificity rules, rewrite the default by selecting .ST.myClass . The generated tooltips become the last child of the target element, so the tooltips inherit some properties from the the target element.","title":"Customization"},{"location":"references/#methods","text":"","title":"Methods"},{"location":"references/#parameters","text":"","title":"Parameters"},{"location":"references/#select","text":"select specifies the target elements. It is one of the following: Selector(pattern) , where pattern is a CSS selector pattern NodeList(nodes) , where nodes is an array of elements a function that takes no input and outputs an array of elements each time it is called","title":"select"},{"location":"references/#content","text":"content specifies the content and is only required by generate and generateOne . Other methods determine the content in other ways. It is a function mapping elements to strings.","title":"content"},{"location":"references/#event","text":"Default: 'hover' event specifies the event triggering the tooltips. It is one of the following: 'hover' : hovering over the target element 'focus' : focusing on the target element An array of 2D coordinates [[x1, y1], ..., [xn, yn]] , where xi, yi are nonnegative integers: hovering over the polygon inside the target element specified by the array; the left edge of the target element has x=0 , and the top edge of the target element has y=0","title":"event"},{"location":"references/#depth","text":"Default: 3 depth specifies the maximum depth of tooltips to be generated. A tooltip that is not inside another tooltip has depth 1. It is a positive integer. One exception is that depth in generateOne is the depth of the one tooltip to be generated. We need this number to assign a proper z-index .","title":"depth"},{"location":"references/#generate","text":"style . generate ( select , content , event , depth ) The most generic generator.","title":".generate"},{"location":"references/#generateone","text":"style . generateOne ( node , content , event , depth ) A generic generator for a single element. Note that here depth is the depth of the one tooltip to be generated.","title":".generateOne"},{"location":"references/#generatefromtitle","text":"style . generateFromTitle ( select , event , depth ) The content of the tooltip is supplied by title attribute. The title attribute is then moved to data-st-title . The selected elements without title attribute are ignored.","title":".generateFromTitle"},{"location":"references/#generatefromattribute","text":"style . generateFromAttribute ( select , attribute , event , depth ) The content of the tooltip is supplied by the attribute named attribute .","title":".generateFromAttribute"},{"location":"references/#generatefromchild","text":"style . generateFromChild ( select , event , depth ) The content of the tooltip is supplied by the last child of the target element, which should be a template . The template is kept. The selected elements without children or whose last element child is not a template are ignored.","title":".generateFromChild"},{"location":"references/#helpers","text":"","title":"Helpers"},{"location":"references/#nodelist","text":"NodeList ( nodes ) See select .","title":"NodeList"},{"location":"references/#selector","text":"Selector ( pattern ) See select .","title":"Selector"},{"location":"references/#removal","text":"","title":"Removal"},{"location":"references/#remove","text":"remove ( select ) The last tooltip of the selected elements are removed. If title was moved to data-st-title , it is restored. The selected elements without children or whose last element child is not a tooltip are ignored.","title":"remove"},{"location":"references/#removeone","text":"removeOne ( node ) The last tooltip of node is removed. If title was moved to data-st-title , it is restored. If the node has no children or the last element child is not a tooltip, do nothing.","title":"removeOne"},{"location":"references/#caveats","text":"The algorithm we used for checking if the cursor is inside the polygon has time complexity O(n), where n is the number of vertices of the polygon. If relativeTo is set to cursor , set a transition delay to make the tooltip move smoother. The tooltip is made a child of the target element; to position the tooltip, the CSS position property of the target element is set to relative if it was static .","title":"Caveats"}]}